import { 
    Blockfrost,
    Data,
    Lucid,
    MintingPolicy,
    PublicKey,
    Unit,
    applyParamsToScript,
    fromText,
    paymentCredentialOf
} from 'https://deno.land/x/lucid@0.9.8/mod.ts'

import keys from './keyfile.json' assert {type: "json"}

const lucid = await Lucid.new(
    new Blockfrost(
        "https://cardano-preprod.blockfrost.io/api/v0",
        keys.blockfrostKey
    ),
    "Preprod"
)

lucid.selectWalletFromSeed(keys.seed)

const ParamShape = Data.Tuple(
    [Data.Object({
        owner: Data.Bytes(),
        tokenName: Data.Bytes()
    })]
)
type TParamShape = Data.Static<typeof ParamShape>;

const pkh: PublicKey = paymentCredentialOf(await lucid.wallet.address()).hash;

const Params = {
    owner: pkh,
    tokenName: fromText("ZingCoinParameterized")
}

const policy: MintingPolicy = {
    "type": "PlutusV2",
    "script": applyParamsToScript<TParamShape>(
        "59090a5909070100003233223322323232323232323232323232323322323232323232322323222323253353232323253355335323235002222222222222533533355301a12001321233001225335002210031001002502125335333573466e3c0380040d00cc4d408c00454088010840d040c8d401488009400440944cd5ce24914556e617574686f72697a6564206d696e74696e67000241533553353233021502400135500122222222222200810242213500222253350041333573466e3c008d4024880040a80a48840ac40944cd5ce2490e496e76616c696420746f6b656e73000241024135001220023333573466e1cd55cea80224000466442466002006004646464646464646464646464646666ae68cdc39aab9d500c480008cccccccccccc88888888888848cccccccccccc00403403002c02802402001c01801401000c008cd406806cd5d0a80619a80d00d9aba1500b33501a01c35742a014666aa03ceb94074d5d0a804999aa80f3ae501d35742a01066a03404a6ae85401cccd54078099d69aba150063232323333573466e1cd55cea801240004664424660020060046464646666ae68cdc39aab9d5002480008cc8848cc00400c008cd40c1d69aba150023031357426ae8940088c98c80cccd5ce01a01981889aab9e5001137540026ae854008c8c8c8cccd5cd19b8735573aa004900011991091980080180119a8183ad35742a00460626ae84d5d1280111931901999ab9c034033031135573ca00226ea8004d5d09aba2500223263202f33573806005e05a26aae7940044dd50009aba1500533501a75c6ae854010ccd540780888004d5d0a801999aa80f3ae200135742a00460486ae84d5d1280111931901599ab9c02c02b029135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d55cf280089baa00135742a00860286ae84d5d1280211931900e99ab9c01e01d01b3333573466e1cd55ce9baa0054800080708c98c8070cd5ce00e80e00d1999ab9a3370e6aae7540192000233221233001003002375c6ae854018dd71aba135744a00c464c6403666ae7007006c06440684c98c8068cd5ce2481035054350001a135573ca00226ea80044d55cf280089baa0013200135501a22112225335001135003220012213335005220023004002333553007120010050040011232230023758002640026aa034446666aae7c004940688cd4064c010d5d080118019aba2002014232323333573466e1cd55cea8012400046644246600200600460186ae854008c014d5d09aba2500223263201433573802a02802426aae7940044dd50009191919191999ab9a3370e6aae75401120002333322221233330010050040030023232323333573466e1cd55cea80124000466442466002006004602a6ae854008cd4034050d5d09aba2500223263201933573803403202e26aae7940044dd50009aba150043335500875ca00e6ae85400cc8c8c8cccd5cd19b875001480108c84888c008010d5d09aab9e500323333573466e1d4009200223212223001004375c6ae84d55cf280211999ab9a3370ea00690001091100191931900d99ab9c01c01b019018017135573aa00226ea8004d5d0a80119a804bae357426ae8940088c98c8054cd5ce00b00a80989aba25001135744a00226aae7940044dd5000899aa800bae75a224464460046eac004c8004d5405c88c8cccd55cf8011280c119a80b9991091980080180118031aab9d5002300535573ca00460086ae8800c0484d5d080089119191999ab9a3370ea002900011a80398029aba135573ca00646666ae68cdc3a801240044a00e464c6402466ae7004c04804003c4d55cea80089baa0011212230020031122001232323333573466e1d400520062321222230040053007357426aae79400c8cccd5cd19b875002480108c848888c008014c024d5d09aab9e500423333573466e1d400d20022321222230010053007357426aae7940148cccd5cd19b875004480008c848888c00c014dd71aba135573ca00c464c6402066ae7004404003803403002c4d55cea80089baa001232323333573466e1cd55cea80124000466442466002006004600a6ae854008dd69aba135744a004464c6401866ae700340300284d55cf280089baa0012323333573466e1cd55cea800a400046eb8d5d09aab9e500223263200a33573801601401026ea80048c8c8c8c8c8cccd5cd19b8750014803084888888800c8cccd5cd19b875002480288488888880108cccd5cd19b875003480208cc8848888888cc004024020dd71aba15005375a6ae84d5d1280291999ab9a3370ea00890031199109111111198010048041bae35742a00e6eb8d5d09aba2500723333573466e1d40152004233221222222233006009008300c35742a0126eb8d5d09aba2500923333573466e1d40192002232122222223007008300d357426aae79402c8cccd5cd19b875007480008c848888888c014020c038d5d09aab9e500c23263201333573802802602202001e01c01a01801626aae7540104d55cf280189aab9e5002135573ca00226ea80048c8c8c8c8cccd5cd19b875001480088ccc888488ccc00401401000cdd69aba15004375a6ae85400cdd69aba135744a00646666ae68cdc3a80124000464244600400660106ae84d55cf280311931900619ab9c00d00c00a009135573aa00626ae8940044d55cf280089baa001232323333573466e1d400520022321223001003375c6ae84d55cf280191999ab9a3370ea004900011909118010019bae357426aae7940108c98c8024cd5ce00500480380309aab9d50011375400224464646666ae68cdc3a800a40084244400246666ae68cdc3a8012400446424446006008600c6ae84d55cf280211999ab9a3370ea00690001091100111931900519ab9c00b00a008007006135573aa00226ea80048c8cccd5cd19b8750014800880308cccd5cd19b8750024800080308c98c8018cd5ce00380300200189aab9d37540029309000a481035054310032001355006222533500110022213500222330073330080020060010033200135500522225335001100222135002225335333573466e1c005200000c00b1333008007006003133300800733500912333001008003002006003112200212212233001004003122002122001112323001001223300330020020011",
        [Params],
        ParamShape)
}

const ZingCoinParameterized: Unit = lucid.utils.mintingPolicyToId(policy) + fromText("ZingCoinParameterized")

const tx = await lucid
                    .newTx()
                    .addSignerKey(pkh)
                    .attachMintingPolicy(policy)
                    .mintAssets({ [ZingCoinParameterized]: 100n }, Data.void())
                    .complete();
const signed = await tx.sign().complete();
const TxHash = await signed.submit()


console.log("Submitted: ", TxHash);