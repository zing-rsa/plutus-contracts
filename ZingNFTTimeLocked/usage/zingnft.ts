import { Blockfrost, Data, Lucid, MintingPolicy, Unit, Validator, fromText } from "https://deno.land/x/lucid/mod.ts"
import keys from './keyfile.json' assert { type: "json"}
import metadata from './metadata/ZingBoi001.json' assert { type: "json"}

const lucid = await Lucid.new(
    new Blockfrost(
        "https://cardano-preprod.blockfrost.io/api/v0",
        keys.blockfrostKey
        ),
    "Preprod"
)

const zingPolicy: MintingPolicy = {
    type: "PlutusV2",
    script: "590bf3590bf0010000332332233223232323232323322323232323232323322323232323232323232333222323232322223232533532323253355335323235002222222222222533533355301712001321233001225335002210031001002502725335333573466e3c0380040f00ec4d40a4004540a0010840f040e8d402488800d400440b44cd5ce24914556e617574686f72697a656420746f206d696e740002c153355335323232350022235002223500522350022253335333501600b00600215335001153350051333501500b00300710371333501500b00300710371333501500b003007355003222222222222005335011335013502302e335012350243500922200102e123333333300122333573466e1c0080040c00bc894cd4ccd5cd19b8700200103002f101215335333573466e240080040c00bc4040404488ccd5cd19b8800200103002f22333573466e240080040c00bc88ccd5cd19b8900200102f03022333573466e200080040bc0c0894cd4ccd5cd19b8900200103002f10011002225335333573466e240080040c00bc4008400440b44cd5ce2491943616e2774206d696e7420616674657220646561646c696e650002c1533553353233029502c001355001222222222222008102c2213500222253350041333573466e3cccdc6240006e34d4034888008008d40348880080c80c48840cc40b44cd5ce24917546f6b656e2064657461696c7320696e636f72726563740002c102c102c135001220023333573466e1cd55cea801a4000466442466002006004646464646464646464646464646666ae68cdc39aab9d500c480008cccccccccccc88888888888848cccccccccccc00403403002c02802402001c01801401000c008cd4080084d5d0a80619a8100109aba1500b33502002235742a014666aa048eb9408cd5d0a804999aa8123ae502335742a01066a0400566ae85401cccd540900b1d69aba150063232323333573466e1cd55cea80124000466a0426464646666ae68cdc39aab9d5002480008cd409ccd40d9d69aba150023039357426ae8940088c98c80eccd5ce01e01d81c89aab9e5001137540026ae854008c8c8c8cccd5cd19b8735573aa0049000119a81319a81b3ad35742a00460726ae84d5d1280111931901d99ab9c03c03b039135573ca00226ea8004d5d09aba2500223263203733573807006e06a26aae7940044dd50009aba1500533502075c6ae854010ccd540900a08004d5d0a801999aa8123ae200135742a00460546ae84d5d1280111931901999ab9c034033031135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d55cf280089baa00135742a00660346ae84d5d1280191931901299ab9c0260250233333573466e1cd55ce9baa0044800080908c98c8090cd5ce012812011081189931901199ab9c4910350543500023135573ca00226ea8004c8004d5409488448894cd40044d400c88004884ccd401488008c010008ccd54c01c480040140100044888d400888d400c894ccd4ccd402001c01000854cd400c400440a840a440a84888c8c8c8c94ccd4018854ccd4018854ccd402084c011261300349854ccd401c84c01126130034984034402c54ccd401c84c011261300349854ccd401884c0112613003498403054ccd401484028402c402454ccd4014854ccd401c84c015261300449854ccd401884c01526130044984030402854ccd401884c015261300449854ccd401484c0152613004498402c94ccd4014854ccd401c854ccd401c84ccd402c028008004585858402c54ccd4018854ccd401884ccd40280240080045858584028402494ccd4010854ccd4018854ccd401884ccd4028024008004585858402854ccd4014854ccd401484ccd40240200080045858584024402094ccd400c854ccd4014854ccd401484ccd4024020008004585858402454ccd4010854ccd401084ccd402001c0080045858584020401c94ccd4008854ccd4010854ccd401084ccd402001c008004585858402054ccd400c854ccd400c84ccd401c018008004585858401c401848d40048888888801c488800c4888008488800448848cc00400c00848848cc00400c00848848cc00400c00848c88c008dd6000990009aa80e111999aab9f0012501c233501b30043574200460066ae880080588c8c8cccd5cd19b8735573aa004900011991091980080180118061aba150023005357426ae8940088c98c8058cd5ce00b80b00a09aab9e5001137540024646464646666ae68cdc39aab9d5004480008cccc888848cccc00401401000c008c8c8c8cccd5cd19b8735573aa0049000119910919800801801180a9aba1500233500d014357426ae8940088c98c806ccd5ce00e00d80c89aab9e5001137540026ae854010ccd54021d728039aba150033232323333573466e1d4005200423212223002004357426aae79400c8cccd5cd19b875002480088c84888c004010dd71aba135573ca00846666ae68cdc3a801a400042444006464c6403a66ae7007807406c0680644d55cea80089baa00135742a00466a012eb8d5d09aba2500223263201733573803002e02a26ae8940044d5d1280089aab9e500113754002266aa002eb9d6889119118011bab00132001355019223233335573e0044a034466a03266442466002006004600c6aae754008c014d55cf280118021aba200301413574200224464646666ae68cdc3a800a400046a00e600a6ae84d55cf280191999ab9a3370ea00490011280391931900a19ab9c015014012011135573aa00226ea800448488c00800c44880048c8c8cccd5cd19b875001480188c848888c010014c01cd5d09aab9e500323333573466e1d400920042321222230020053009357426aae7940108cccd5cd19b875003480088c848888c004014c01cd5d09aab9e500523333573466e1d40112000232122223003005375c6ae84d55cf280311931900919ab9c01301201000f00e00d135573aa00226ea80048c8c8cccd5cd19b8735573aa004900011991091980080180118029aba15002375a6ae84d5d1280111931900719ab9c00f00e00c135573ca00226ea80048c8cccd5cd19b8735573aa002900011bae357426aae7940088c98c8030cd5ce00680600509baa001232323232323333573466e1d4005200c21222222200323333573466e1d4009200a21222222200423333573466e1d400d2008233221222222233001009008375c6ae854014dd69aba135744a00a46666ae68cdc3a8022400c4664424444444660040120106eb8d5d0a8039bae357426ae89401c8cccd5cd19b875005480108cc8848888888cc018024020c030d5d0a8049bae357426ae8940248cccd5cd19b875006480088c848888888c01c020c034d5d09aab9e500b23333573466e1d401d2000232122222223005008300e357426aae7940308c98c8054cd5ce00b00a80980900880800780700689aab9d5004135573ca00626aae7940084d55cf280089baa0012323232323333573466e1d400520022333222122333001005004003375a6ae854010dd69aba15003375a6ae84d5d1280191999ab9a3370ea0049000119091180100198041aba135573ca00c464c6401c66ae7003c03803002c4d55cea80189aba25001135573ca00226ea80048c8c8cccd5cd19b875001480088c8488c00400cdd71aba135573ca00646666ae68cdc3a8012400046424460040066eb8d5d09aab9e500423263200b33573801801601201026aae7540044dd500089119191999ab9a3370ea00290021091100091999ab9a3370ea004900111a80418031aba135573ca00846666ae68cdc3a801a40004a010464c6401866ae700340300280240204d55cea80089baa0011212223003004112220022323333573466e1d40052002200c23333573466e1d40092000200c23263200633573800e00c00800626aae74dd5000a4c24002921035054310032001355006222533500110022213500222330073330080020060010033200135500522225335001100222135002225335333573466e1c005200000c00b1333008007006003133300800733500912333001008003002006003112200212212233001004003122002122001112323001001223300330020020013351223330024891cc1bd6f764d3b68b9f689fbc7ea8027fad5fb190a71caab469cfa8f83004881075a696e67426f690048303e652578d8c88848ccc00401000c00880041"
}

lucid.selectWalletFromSeed(keys.seed);

const zingBoi: Unit = lucid.utils.mintingPolicyToId(zingPolicy) + fromText("ZingBoi001");

const timeInt = Date.now() + (60 * 1000)

const tx = await lucid
            .newTx()
            .mintAssets({ [zingBoi] : 1n}, Data.void())
            .attachMintingPolicy(zingPolicy)
            .attachMetadata(721, metadata)
            .addSigner(await lucid.wallet.address())
            .validTo(timeInt)
            .complete()

const signed = await tx.sign().complete();

const hash = await signed.submit();

console.log('submitted', hash)
