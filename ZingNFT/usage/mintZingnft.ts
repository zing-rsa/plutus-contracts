import { 
    Blockfrost, 
    Lucid, 
    MintingPolicy, 
    applyParamsToScript, 
    Data, 
    Unit, 
    UTxO 
} from 'https://deno.land/x/lucid/mod.ts'

import keys from './keyfile.json' assert { type: 'json'}

const lucid = await Lucid.new(
    new Blockfrost(
        "https://cardano-preprod.blockfrost.io/api/v0",
        keys.blockfrostKey
    ),
    'Preprod'
)

const ThreadParamsShape = Data.Tuple(
    [Data.Bytes()]
)
type TThreadParamsShape = Data.Static<typeof ThreadParamsShape>

function getThreadPolicy(utxo: UTxO): MintingPolicy {
    return {
        type: 'PlutusV2',
        script: applyParamsToScript<TThreadParamsShape>(
            "59092a59092701000032332233223232323232323232323232323233223232323232323232222323253353232323253355335533533355300b120013212330012253350022100310010025012253355335333573466e3cd400488008d4014880080940904ccd5cd19b87350012200135005220010250241024135014001150133355300a120012350012200235500122222222222200c21025102310241335738921204578706563746564206f757470757420776173206e6f7420636f6e73756d6564000231533553353233020502300135500122222222222200810232213500222253350041333573466e3c009221067468726561640002902822102a1024133573892113546f6b656e4e616d6520696e636f7272656374000231023135001220023333573466e1cd55cea80224000466442466002006004646464646464646464646464646666ae68cdc39aab9d500c480008cccccccccccc88888888888848cccccccccccc00403403002c02802402001c01801401000c008cd4064068d5d0a80619a80c80d1aba1500b33501901b35742a014666aa03aeb94070d5d0a804999aa80ebae501c35742a01066a0320486ae85401cccd54074095d69aba150063232323333573466e1cd55cea801240004664424660020060046464646666ae68cdc39aab9d5002480008cc8848cc00400c008cd40bdd69aba150023030357426ae8940088c98c80c8cd5ce01981901809aab9e5001137540026ae854008c8c8c8cccd5cd19b8735573aa004900011991091980080180119a817bad35742a00460606ae84d5d1280111931901919ab9c033032030135573ca00226ea8004d5d09aba2500223263202e33573805e05c05826aae7940044dd50009aba1500533501975c6ae854010ccd540740848004d5d0a801999aa80ebae200135742a00460466ae84d5d1280111931901519ab9c02b02a028135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d55cf280089baa00135742a00860266ae84d5d1280211931900e19ab9c01d01c01a3333573466e1cd55ce9baa00548000806c8c98c806ccd5ce00e00d80c9808802880c89931900c99ab9c4910350543500019135573ca00226ea8004c8004d5406c8844894cd400454070884cd4074c010008cd54c01848004010004c8004d5406888448894cd40044d400c88004884ccd401488008c010008ccd54c01c4800401401000448c88c008dd6000990009aa80d111999aab9f0012501a233501930043574200460066ae880080508c8c8cccd5cd19b8735573aa004900011991091980080180118061aba150023005357426ae8940088c98c8050cd5ce00a80a00909aab9e5001137540024646464646666ae68cdc39aab9d5004480008cccc888848cccc00401401000c008c8c8c8cccd5cd19b8735573aa0049000119910919800801801180a9aba1500233500d014357426ae8940088c98c8064cd5ce00d00c80b89aab9e5001137540026ae854010ccd54021d728039aba150033232323333573466e1d4005200423212223002004357426aae79400c8cccd5cd19b875002480088c84888c004010dd71aba135573ca00846666ae68cdc3a801a400042444006464c6403666ae7007006c06406005c4d55cea80089baa00135742a00466a012eb8d5d09aba2500223263201533573802c02a02626ae8940044d5d1280089aab9e500113754002266aa002eb9d6889119118011bab00132001355017223233335573e0044a030466a02e66442466002006004600c6aae754008c014d55cf280118021aba200301213574200224464646666ae68cdc3a800a400046a00e600a6ae84d55cf280191999ab9a3370ea00490011280391931900919ab9c01301201000f135573aa00226ea800448488c00800c44880048c8c8cccd5cd19b875001480188c848888c010014c01cd5d09aab9e500323333573466e1d400920042321222230020053009357426aae7940108cccd5cd19b875003480088c848888c004014c01cd5d09aab9e500523333573466e1d40112000232122223003005375c6ae84d55cf280311931900819ab9c01101000e00d00c00b135573aa00226ea80048c8c8cccd5cd19b8735573aa004900011991091980080180118029aba15002375a6ae84d5d1280111931900619ab9c00d00c00a135573ca00226ea80048c8cccd5cd19b8735573aa002900011bae357426aae7940088c98c8028cd5ce00580500409baa001232323232323333573466e1d4005200c21222222200323333573466e1d4009200a21222222200423333573466e1d400d2008233221222222233001009008375c6ae854014dd69aba135744a00a46666ae68cdc3a8022400c4664424444444660040120106eb8d5d0a8039bae357426ae89401c8cccd5cd19b875005480108cc8848888888cc018024020c030d5d0a8049bae357426ae8940248cccd5cd19b875006480088c848888888c01c020c034d5d09aab9e500b23333573466e1d401d2000232122222223005008300e357426aae7940308c98c804ccd5ce00a00980880800780700680600589aab9d5004135573ca00626aae7940084d55cf280089baa0012323232323333573466e1d400520022333222122333001005004003375a6ae854010dd69aba15003375a6ae84d5d1280191999ab9a3370ea0049000119091180100198041aba135573ca00c464c6401866ae700340300280244d55cea80189aba25001135573ca00226ea80048c8c8cccd5cd19b875001480088c8488c00400cdd71aba135573ca00646666ae68cdc3a8012400046424460040066eb8d5d09aab9e500423263200933573801401200e00c26aae7540044dd500089119191999ab9a3370ea00290021091100091999ab9a3370ea00490011190911180180218031aba135573ca00846666ae68cdc3a801a400042444004464c6401466ae7002c02802001c0184d55cea80089baa0012323333573466e1d40052002200c23333573466e1d40092000200c23263200633573800e00c00800626aae74dd5000a4c240029201035054310032001355006222533500110022213500222330073330080020060010033200135500522225335001100222135002225335333573466e1c005200000c00b1333008007006003133300800733500912333001008003002006003112200212212233001004003122002122001112323001001223300330020020011",
            [utxo.txHash + '#' + utxo.outputIndex],
            ThreadParamsShape
        )
    }
}

type ContractInfo = {
    threadToken: string,
    maxSupply: bigint,
    tokenPrefix: string
}

const ContractInfoParamsShape = Data.Tuple(
    [Data.Object({
        threadToken: Data.Bytes(),
        maxSupply: Data.Integer(), 
        tokenPrefix: Data.Bytes()
    })]
)
type TContractInfoParamsShape = Data.Static<typeof ContractInfoParamsShape>;

function getZingBoiPolicy(info: ContractInfo): MintingPolicy {
    return {
        type: 'PlutusV2',
        script: applyParamsToScript<TContractInfoParamsShape>(
            "590e23590e2001000032323322332232323232323232323232323232323233223232323232323232323232332232323232323232322323232223232533532323232323232325335533553355001210391037103813357389211d446f65736e277420636f6e73756d65206120746872656164746f6b656e0003715335533553355003215335500221333573466e1cd400888800ccdc01a800911001a40040740722070206e2070266ae7124012952657475726e65642074687265616420656974686572206d697373696e67206f7220696e76616c6964000371533553355335500321333573466e24d400488800cd40248880080e40e040dc40e04cd5ce2481124d617820737570706c792072656163686564000371533553353233036503b001355004222222222222008103722135002222533500415335333573466e3c008cdc51a806911000991b98333355301e1200133502622230033002001200172c66aa602e240024a66a666ae68cdc3800a400007e07c2920101300015335333573466e1c005200203f03e149101310015335333573466e1c005200403f03e149101320015335333573466e1c005200603f03e149101330015335333573466e1c005200803f03e149101340015335333573466e1c005200a03f03e149101350015335333573466e1c005200c03f03e149101360015335333573466e1c005200e03f03e149101370015335333573466e1c005201003f03e14910138001335333573466e1c005201203f03e4910139004901013000301800149100500703d03c15335333573466e21401cd40348880080f40f04ccd5cd19b885007480000f00f440f040f08840f840e04cd5ce24915546f6b656e4e616d65206e6f7420636f7272656374000371037103710371533533355301712001501e2533533301501435001222200350071350270011502633553010120012350012200135500322222222222200c21533353500122220021502621335026022001215027150251335500123370066e08d4004888008d4004888004d400488800d20011533533355301512001501c2533533301301235001222200350051350250011502435500122222222222200a2153335350012222002150242133502402000121502515023135001220023333573466e1cd55cea802a4000466442466002006004646464646464646464646464646666ae68cdc39aab9d500c480008cccccccccccc88888888888848cccccccccccc00403403002c02802402001c01801401000c008cd40b00b4d5d0a80619a8160169aba1500b33502c02e35742a014666aa066eb940c8d5d0a804999aa819bae503235742a01066a05806e6ae85401cccd540cc0e1d69aba150063232323333573466e1cd55cea801240004664424660020060046464646666ae68cdc39aab9d5002480008cc8848cc00400c008cd4109d69aba150023043357426ae8940088c98c8114cd5ce02302282189aab9e5001137540026ae854008c8c8c8cccd5cd19b8735573aa004900011991091980080180119a8213ad35742a00460866ae84d5d1280111931902299ab9c046045043135573ca00226ea8004d5d09aba2500223263204133573808408207e26aae7940044dd50009aba1500533502c75c6ae854010ccd540cc0d08004d5d0a801999aa819bae200135742a004606c6ae84d5d1280111931901e99ab9c03e03d03b135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d55cf280089baa00135742a00a604c6ae84d5d1280291931901799ab9c03002f02d3333573466e1cd55ce9baa0064800080b88c98c80b8cd5ce017817016099a81919aa81a1a80091100199a81919aa81a24506746872656164004800940cd40cccccd5cd19b8735573aa00e90001199911091998008020018011bae35742a00e6eb4d5d0a8031bae357426ae8940188c98c80b0cd5ce016816015081589931901599ab9c4901035054350002b135573ca00226ea80044d5d1280089aab9e500113754002640026aa056442244a66a0022a05a44266a05c600800466aa600c24002008002640026aa054446464a66a666ae68cdc3a800a4000054052266a0566aa00444002a0582666aa601224002a05666a0566aa00444002a0586008a00226aa00244004266aa05666e0c00400ccdc3000801a402844666ae68cdc3801000813012911199aa9803090009a806280591a80091199aa9804890009a807a80711a80091199a800919805240000024466016004002466014002900000099aa98048900091a8009119aa816001199a800919aa98068900091a8009119aa8180011aa80780080091199aaa804807801000919aa98068900091a8009119aa8180011aa807000800999aaa802005001000888911199aa980209000a81319aa98040900091a8009119aa8158011aa805000999aa980209000911a80111299a999aa9804890009919a80911199a801910010010009a80091000891980091299a8010816080081491a80091198050010028030801899a815002001a81380099aa98040900091a800911919aa8160019800802990009aa81611299a80089aa8058019109a80111299a99806001004089111980100500209803001801190009aa8129108911299a800880111099802801199aa980389000802802000990009aa8121108911299a80089a80191000910999a802910011802001199aa9803890008028020008890911180180208909111800802190009aa810910891299a8008a81191099a812180200119aa98030900080200091199ab9a3371e00400203c03a2246600244a66a0042002203a0382466a00644666a006440040040026a00244002266a00244a66a004420062002a00e244246600200600446464646666ae68cdc39aab9d5003480008ccc88848ccc00401000c008dd69aba15003375a6ae854008dd69aba135744a004464c6402e66ae7006005c0544d5d1280089aab9e5001137540022464460046eb0004c8004d5406c88cccd55cf8009280e119a80d98021aba1002300335744004028464646666ae68cdc39aab9d5002480008cc8848cc00400c008c030d5d0a80118029aba135744a004464c6402866ae700540500484d55cf280089baa0012323232323333573466e1cd55cea8022400046666444424666600200a0080060046464646666ae68cdc39aab9d5002480008cc8848cc00400c008c054d5d0a80119a80580a1aba135744a004464c6403266ae7006806405c4d55cf280089baa00135742a008666aa016eb94028d5d0a8019919191999ab9a3370ea0029002119091118010021aba135573ca00646666ae68cdc3a80124004464244460020086eb8d5d09aab9e500423333573466e1d400d20002122200323263201b33573803803603203002e26aae7540044dd50009aba1500233500775c6ae84d5d1280111931900a99ab9c016015013135744a00226ae8940044d55cf280089baa00112232323333573466e1d400520002350073005357426aae79400c8cccd5cd19b875002480089401c8c98c8050cd5ce00a80a00900889aab9d5001137540022424460040062244002266aa002eb9d6889119118011bab00132001355015223233335573e0044a02e466a02c66aa030600c6aae754008c014d55cf280118021aba200300f135742002464646666ae68cdc3a800a400c46424444600800a600e6ae84d55cf280191999ab9a3370ea004900211909111180100298049aba135573ca00846666ae68cdc3a801a400446424444600200a600e6ae84d55cf280291999ab9a3370ea00890001190911118018029bae357426aae7940188c98c8040cd5ce00880800700680600589aab9d500113754002464646666ae68cdc39aab9d5002480008cc8848cc00400c008c014d5d0a8011bad357426ae8940088c98c8030cd5ce00680600509aab9e5001137540024646666ae68cdc39aab9d5001480008dd71aba135573ca004464c6401466ae7002c0280204dd5000919191919191999ab9a3370ea002900610911111100191999ab9a3370ea004900510911111100211999ab9a3370ea00690041199109111111198008048041bae35742a00a6eb4d5d09aba2500523333573466e1d40112006233221222222233002009008375c6ae85401cdd71aba135744a00e46666ae68cdc3a802a400846644244444446600c01201060186ae854024dd71aba135744a01246666ae68cdc3a8032400446424444444600e010601a6ae84d55cf280591999ab9a3370ea00e900011909111111180280418071aba135573ca018464c6402666ae7005004c04404003c03803403002c4d55cea80209aab9e5003135573ca00426aae7940044dd50009191919191999ab9a3370ea002900111999110911998008028020019bad35742a0086eb4d5d0a8019bad357426ae89400c8cccd5cd19b875002480008c8488c00800cc020d5d09aab9e500623263200c33573801a01801401226aae75400c4d5d1280089aab9e500113754002464646666ae68cdc3a800a400446424460020066eb8d5d09aab9e500323333573466e1d400920002321223002003375c6ae84d55cf280211931900499ab9c00a009007006135573aa00226ea8004488c8c8cccd5cd19b87500148010848880048cccd5cd19b875002480088c84888c00c010c018d5d09aab9e500423333573466e1d400d20002122200223263200a33573801601401000e00c26aae7540044dd50009191999ab9a3370ea0029001100511999ab9a3370ea0049000100511931900319ab9c007006004003135573a6ea80052612001491035054310032001355007222533500110022213500222330073330080020060010033200135500622225335001100222135002225335333573466e1c005200000a0091333008007006003133300800733500b12333001008003002006003122002122001112200212212233001004003112212330010030021123230010012233003300200200101",
            [info],
            ContractInfoParamsShape
        )
    }
}

const ThreadDatumShape = Data.Object({
    mintCount: Data.Integer(),
    threadIdx: Data.Integer(),
    threadCount: Data.Integer()
})


async function deploy() {

    lucid.selectWalletFromSeed(keys.seed);

    const utxo = (await lucid.wallet.getUtxos())[0];

    const threadMintingPolicy = getThreadPolicy(utxo);
    
    const zingBoiMintingPolicy = getZingBoiPolicy({
        threadToken: lucid.utils.mintingPolicyToId(threadMintingPolicy),
        maxSupply: 10n,
        tokenPrefix: "ZingBoi"
    })

    const threadDatum = {
        mintCount: 0, 
        threadIdx: 0,
        threadCount: 1
    }

    const thread: Unit = lucid.utils.mintingPolicyToId(threadMintingPolicy) + "thread"

    const tx = await lucid.newTx()
                .attachMintingPolicy(threadMintingPolicy)
                .collectFrom([utxo])
                .mintAssets({ thread : 1n})
                .payToContract(zingBoiMintingPolicy, threadDatum, {thread: 1n})



    


}

async function mint() {
    




    
}
