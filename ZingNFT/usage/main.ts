import { 
    Blockfrost, 
    Lucid, 
    MintingPolicy, 
    applyParamsToScript, 
    Data, 
    Unit,
    UTxO,
    fromText,
    Validator
} from 'https://deno.land/x/lucid/mod.ts'

import keys from './keyfile.json' assert { type: 'json'}

const lucid = await Lucid.new(
    new Blockfrost(
        "https://cardano-preprod.blockfrost.io/api/v0",
        keys.blockfrostKey
    ),
    'Preprod'
)

// thread policy
const ThreadParamsShape = Data.Tuple(
    [Data.Bytes(), Data.Integer()]
)
type TThreadParamsShape = Data.Static<typeof ThreadParamsShape>

type TxOutRef = {
    txOutRefId:  string,
    txOutRefIdx: bigint
}

function getThreadPolicy(utxo: TxOutRef): MintingPolicy {
    return {
        type: 'PlutusV2',
        script: applyParamsToScript<TThreadParamsShape>(
            "59093359093001000032332233223232323232323232323232323232332232323232323232322222323253353232323253355335533533355300c120013212330012253350022100310010025013253355335333573466e3cd400488008d40148800809c0984ccd5cd19b87350012200135005220010270261026135015001150143355300b120012350012200235500122222222222200c210271025102613357389201204578706563746564206f757470757420776173206e6f7420636f6e73756d6564000251533553353233022502500135500122222222222200810252213500222253350041333573466e3c009221067468726561640002b02a22102c1026133573892113546f6b656e4e616d6520696e636f7272656374000251025135001220023333573466e1cd55cea80224000466442466002006004646464646464646464646464646666ae68cdc39aab9d500c480008cccccccccccc88888888888848cccccccccccc00403403002c02802402001c01801401000c008cd406806cd5d0a80619a80d00d9aba1500b33501a01c35742a014666aa03ceb94074d5d0a804999aa80f3ae501d35742a01066a03404c6ae85401cccd5407809dd69aba150063232323333573466e1cd55cea801240004664424660020060046464646666ae68cdc39aab9d5002480008cc8848cc00400c008cd40c5d69aba150023032357426ae8940088c98c80d0cd5ce01a81a01909aab9e5001137540026ae854008c8c8c8cccd5cd19b8735573aa004900011991091980080180119a818bad35742a00460646ae84d5d1280111931901a19ab9c035034032135573ca00226ea8004d5d09aba2500223263203033573806206005c26aae7940044dd50009aba1500533501a75c6ae854010ccd540780888004d5d0a801999aa80f3ae200135742a004604a6ae84d5d1280111931901619ab9c02d02c02a135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d55cf280089baa00135742a00860286ae84d5d1280211931900f19ab9c01f01e01c3333573466e1cd55ce9baa0054800080748c98c8074cd5ce00f00e80d998099bae006375a00a2036264c6403666ae71241035054350001b135573ca00226ea8004c8004d540708844894cd400454074884cd4078c010008cd54c01848004010004c8004d5406c88448894cd40044d400c88004884ccd401488008c010008ccd54c01c4800401401000448c88c008dd6000990009aa80d911999aab9f0012501b233501a30043574200460066ae880080548c8c8cccd5cd19b8735573aa004900011991091980080180118061aba150023005357426ae8940088c98c8054cd5ce00b00a80989aab9e5001137540024646464646666ae68cdc39aab9d5004480008cccc888848cccc00401401000c008c8c8c8cccd5cd19b8735573aa0049000119910919800801801180b1aba1500233500d015357426ae8940088c98c8068cd5ce00d80d00c09aab9e5001137540026ae854010ccd54021d728039aba150033232323333573466e1d4005200423212223002004357426aae79400c8cccd5cd19b875002480088c84888c004010dd71aba135573ca00846666ae68cdc3a801a400042444006464c6403866ae700740700680640604d55cea80089baa00135742a00466a012eb8d5d09aba2500223263201633573802e02c02826ae8940044d5d1280089aab9e500113754002266aa002eb9d6889119118011bab00132001355018223233335573e0044a032466a03066442466002006004600c6aae754008c014d55cf280118021aba200301313574200224464646666ae68cdc3a800a400046a00e600a6ae84d55cf280191999ab9a3370ea00490011280391931900999ab9c014013011010135573aa00226ea800448488c00800c44880048c8c8cccd5cd19b875001480188c848888c010014c020d5d09aab9e500323333573466e1d40092004232122223002005300a357426aae7940108cccd5cd19b875003480088c848888c004014c01cd5d09aab9e500523333573466e1d40112000232122223003005375c6ae84d55cf280311931900899ab9c01201100f00e00d00c135573aa00226ea80048c8c8cccd5cd19b8735573aa004900011980298031aba15002375a6ae84d5d1280111931900699ab9c00e00d00b135573ca00226ea80048848cc00400c0088c8cccd5cd19b8735573aa002900011bae357426aae7940088c98c8028cd5ce00580500409baa001232323232323333573466e1d4005200c21222222200323333573466e1d4009200a21222222200423333573466e1d400d2008233221222222233001009008375c6ae854014dd69aba135744a00a46666ae68cdc3a8022400c4664424444444660040120106eb8d5d0a8039bae357426ae89401c8cccd5cd19b875005480108cc8848888888cc018024020c030d5d0a8049bae357426ae8940248cccd5cd19b875006480088c848888888c01c020c034d5d09aab9e500b23333573466e1d401d2000232122222223005008300e357426aae7940308c98c804ccd5ce00a00980880800780700680600589aab9d5004135573ca00626aae7940084d55cf280089baa0012323232323333573466e1d400520022333222122333001005004003375a6ae854010dd69aba15003375a6ae84d5d1280191999ab9a3370ea0049000119091180100198041aba135573ca00c464c6401866ae700340300280244d55cea80189aba25001135573ca00226ea80048c8c8cccd5cd19b875001480088c8488c00400cdd71aba135573ca00646666ae68cdc3a8012400046424460040066eb8d5d09aab9e500423263200933573801401200e00c26aae7540044dd500089119191999ab9a3370ea00290021091100091999ab9a3370ea00490011190911180180218031aba135573ca00846666ae68cdc3a801a400042444004464c6401466ae7002c02802001c0184d55cea80089baa0012323333573466e1d40052002200c23333573466e1d40092000200c23263200633573800e00c00800626aae74dd5000a4c24002921035054310032001355006222533500110022213500222330073330080020060010033200135500522225335001100222135002225335333573466e1c005200000c00b1333008007006003133300800733500912333001008003002006003112200212212233001004003122002122001112323001001223300330020020011",
            [utxo.txOutRefId, utxo.txOutRefIdx],
            ThreadParamsShape
        )
    }
}

// nft policy
type ContractInfo = {
    threadToken: string,
}

const ContractInfoShape = Data.Tuple(
    [Data.Object({
        threadToken: Data.Bytes(),
    })]
)
type TContractInfoShape = Data.Static<typeof ContractInfoShape>;

function getZingBoiPolicy(info: ContractInfo): MintingPolicy {
    return {
        type: 'PlutusV2',
        script: applyParamsToScript<TContractInfoShape>(
            "59092a59092701000032332233223232323232323232323232323233223232323232323232222323253353232323253355335533533355300b120013212330012253350022100310010025012253355335333573466e3cd400488008d4014880080940904ccd5cd19b87350012200135005220010250241024135014001150133355300a120012350012200235500122222222222200c21025102310241335738921204578706563746564206f757470757420776173206e6f7420636f6e73756d6564000231533553353233020502300135500122222222222200810232213500222253350041333573466e3c009221067468726561640002902822102a1024133573892113546f6b656e4e616d6520696e636f7272656374000231023135001220023333573466e1cd55cea80224000466442466002006004646464646464646464646464646666ae68cdc39aab9d500c480008cccccccccccc88888888888848cccccccccccc00403403002c02802402001c01801401000c008cd4064068d5d0a80619a80c80d1aba1500b33501901b35742a014666aa03aeb94070d5d0a804999aa80ebae501c35742a01066a0320486ae85401cccd54074095d69aba150063232323333573466e1cd55cea801240004664424660020060046464646666ae68cdc39aab9d5002480008cc8848cc00400c008cd40bdd69aba150023030357426ae8940088c98c80c8cd5ce01981901809aab9e5001137540026ae854008c8c8c8cccd5cd19b8735573aa004900011991091980080180119a817bad35742a00460606ae84d5d1280111931901919ab9c033032030135573ca00226ea8004d5d09aba2500223263202e33573805e05c05826aae7940044dd50009aba1500533501975c6ae854010ccd540740848004d5d0a801999aa80ebae200135742a00460466ae84d5d1280111931901519ab9c02b02a028135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d55cf280089baa00135742a00860266ae84d5d1280211931900e19ab9c01d01c01a3333573466e1cd55ce9baa00548000806c8c98c806ccd5ce00e00d80c9808802880c89931900c99ab9c4910350543500019135573ca00226ea8004c8004d5406c8844894cd400454070884cd4074c010008cd54c01848004010004c8004d5406888448894cd40044d400c88004884ccd401488008c010008ccd54c01c4800401401000448c88c008dd6000990009aa80d111999aab9f0012501a233501930043574200460066ae880080508c8c8cccd5cd19b8735573aa004900011991091980080180118061aba150023005357426ae8940088c98c8050cd5ce00a80a00909aab9e5001137540024646464646666ae68cdc39aab9d5004480008cccc888848cccc00401401000c008c8c8c8cccd5cd19b8735573aa0049000119910919800801801180a9aba1500233500d014357426ae8940088c98c8064cd5ce00d00c80b89aab9e5001137540026ae854010ccd54021d728039aba150033232323333573466e1d4005200423212223002004357426aae79400c8cccd5cd19b875002480088c84888c004010dd71aba135573ca00846666ae68cdc3a801a400042444006464c6403666ae7007006c06406005c4d55cea80089baa00135742a00466a012eb8d5d09aba2500223263201533573802c02a02626ae8940044d5d1280089aab9e500113754002266aa002eb9d6889119118011bab00132001355017223233335573e0044a030466a02e66442466002006004600c6aae754008c014d55cf280118021aba200301213574200224464646666ae68cdc3a800a400046a00e600a6ae84d55cf280191999ab9a3370ea00490011280391931900919ab9c01301201000f135573aa00226ea800448488c00800c44880048c8c8cccd5cd19b875001480188c848888c010014c01cd5d09aab9e500323333573466e1d400920042321222230020053009357426aae7940108cccd5cd19b875003480088c848888c004014c01cd5d09aab9e500523333573466e1d40112000232122223003005375c6ae84d55cf280311931900819ab9c01101000e00d00c00b135573aa00226ea80048c8c8cccd5cd19b8735573aa004900011991091980080180118029aba15002375a6ae84d5d1280111931900619ab9c00d00c00a135573ca00226ea80048c8cccd5cd19b8735573aa002900011bae357426aae7940088c98c8028cd5ce00580500409baa001232323232323333573466e1d4005200c21222222200323333573466e1d4009200a21222222200423333573466e1d400d2008233221222222233001009008375c6ae854014dd69aba135744a00a46666ae68cdc3a8022400c4664424444444660040120106eb8d5d0a8039bae357426ae89401c8cccd5cd19b875005480108cc8848888888cc018024020c030d5d0a8049bae357426ae8940248cccd5cd19b875006480088c848888888c01c020c034d5d09aab9e500b23333573466e1d401d2000232122222223005008300e357426aae7940308c98c804ccd5ce00a00980880800780700680600589aab9d5004135573ca00626aae7940084d55cf280089baa0012323232323333573466e1d400520022333222122333001005004003375a6ae854010dd69aba15003375a6ae84d5d1280191999ab9a3370ea0049000119091180100198041aba135573ca00c464c6401866ae700340300280244d55cea80189aba25001135573ca00226ea80048c8c8cccd5cd19b875001480088c8488c00400cdd71aba135573ca00646666ae68cdc3a8012400046424460040066eb8d5d09aab9e500423263200933573801401200e00c26aae7540044dd500089119191999ab9a3370ea00290021091100091999ab9a3370ea00490011190911180180218031aba135573ca00846666ae68cdc3a801a400042444004464c6401466ae7002c02802001c0184d55cea80089baa0012323333573466e1d40052002200c23333573466e1d40092000200c23263200633573800e00c00800626aae74dd5000a4c240029201035054310032001355006222533500110022213500222330073330080020060010033200135500522225335001100222135002225335333573466e1c005200000c00b1333008007006003133300800733500912333001008003002006003112200212212233001004003122002122001112323001001223300330020020011",
            [info],
            ContractInfoShape
        )
    }
}

// thread validator

type CompleteThreadInfo = {
    threadToken: string, 
    tokenPolicy: string,
    tokenPrefix: string,
    maxSupply: bigint
}

type ThreadInfo = {
    tokenPrefix: string,
    maxSupply: bigint
}

type ThreadDatum = {
    mintCount: bigint,
    threadIdx: bigint, 
    threadCount: bigint
}

const ThreadDatumShape = Data.Object({
    mintCount: Data.Integer(), 
    threadIdx: Data.Integer(),
    threadCount: Data.Integer()
})
type TThreadDatumShape = Data.Static<typeof ThreadDatumShape>;

const ThreadInfoShape = Data.Tuple(
    [Data.Object({
        threadToken: Data.Bytes(),
        tokenPolicy: Data.Bytes(),
        tokenPrefix: Data.Bytes(),
        maxSupply:   Data.Integer()
    })]
)
type TThreadInfoShape = Data.Static<typeof ThreadInfoShape>;

function getThreadValidator(info: CompleteThreadInfo): Validator {
    return {
        "type": "PlutusV2",
        "script": applyParamsToScript<TThreadInfoShape>(
            "590d8b590d880100003233223232323232323232323232323233223232332232323232323232323232332232323232323223232323222232325335323232323253355335533553353335530151200133501c2253350022100310015022253353232333553018120013501e501d2350012233355301b1200135021502023500122333500123303e4800000488cc0fc0080048cc0f800520000013355301b1200123500122335502e002333500123355301f120012350012233550320023550210010012233355501b02100200123355301f1200123500122335503200235502000100133355501601c002001335028335502a350072222004335028335502a48906746872656164004800940a540a4d4004888800c4d40900045408cd54004888888888888028854ccd4d400488880085408c84cd408c07c00485409054088854cd4ccd5cd19b8735001222003337006a00a444006900101b81b0a99a999ab9a3370e6a0024440046a00a44400406e06c2666ae68cdc39a8009110009a80291100081b81b081b081b081a881b099ab9c4912b54687265616420746f6b656e20656974686572206e6f742072657475726e6564206f7220696e76616c696400035153355335333573466e20d401088800cd401488880040d80d440d84cd5ce249124d617820737570706c7920726561636865640003515335333573466e1cc8c8c8c8c8c004014c8004d540ec88cd400520002235002225335333573466e3c0080241000fc4c01c0044c01800cc8004d540e888cd400520002235002225335333573466e3c00801c0fc0f840044c01800ccdc51a80391110011b983233335530181200133501f22230033002001200172c66aa6026240024a66a666ae68cdc3800a4000074072292101300015335333573466e1c005200203a039149101310015335333573466e1c005200403a039149101320015335333573466e1c005200603a039149101330015335333573466e1c005200803a039149101340015335333573466e1c005200a03a039149101350015335333573466e1c005200c03a039149101360015335333573466e1c005200e03a039149101370015335333573466e1c005201003a03914910138001335333573466e1c005201203a0394910139004901013000301400149100337006a00c44400690011a80311110019aa8009111111111110042400406c06a206c266ae71241304173736f636961746564204e4654206d696e7420697320656974686572206d697373696e67206f7220696e76616c69640003510351035135001220023333573466e1cd55cea802a4000466442466002006004646464646464646464646464646666ae68cdc39aab9d500c480008cccccccccccc88888888888848cccccccccccc00403403002c02802402001c01801401000c008cd40ac0b0d5d0a80619a8158161aba1500b33502b02d35742a014666aa064eb940c4d5d0a804999aa8193ae503135742a01066a0560726ae85401cccd540c80e9d69aba150063232323333573466e1cd55cea801240004664424660020060046464646666ae68cdc39aab9d5002480008cc8848cc00400c008cd4111d69aba150023045357426ae8940088c98c811ccd5ce02402382289aab9e5001137540026ae854008c8c8c8cccd5cd19b8735573aa004900011991091980080180119a8223ad35742a004608a6ae84d5d1280111931902399ab9c048047045135573ca00226ea8004d5d09aba2500223263204333573808808608226aae7940044dd50009aba1500533502b75c6ae854010ccd540c80d88004d5d0a801999aa8193ae200135742a00460706ae84d5d1280111931901f99ab9c04003f03d135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d55cf280089baa00135742a00a60506ae84d5d1280291931901899ab9c03203102f3333573466e1cd55ce9baa0064800080c08c98c80c0cd5ce018818017180c8031999ab9a3370e6aae7540252000233332222123333001005004003002375c6ae854024dd71aba15008375c6ae85401cdd69aba135744a00e464c6405c66ae700bc0b80b040b44c98c80b4cd5ce2481035054350002d135573ca00226ea80044d5d1280089aba25001135573ca00226ea8004c8004d5409c8844894cd40045406c884cd4070c010008cd54c01848004010004c8004d5409888c8c94cd4ccd5cd19b875001480000a40a04cd4064d540088800540684ccd54c01c480054064cd4064d54008880054068c01140044d54004880084cd54064cdc180080199b8600100348050444888ccd54c010480054058cd54c020480048d400488cd5406c008d54028004ccd54c0104800488d4008894cd4ccd54c02448004c8cd404488ccd400c88008008004d40048800448cc004894cd400840b440040a88d400488cc028008014018400c4cd406801000d405c004cd54c020480048d400488c8cd5407000cc004014c8004d540a8894cd40044d5402c00c884d4008894cd4cc03000802044888cc0080280104c01800c008c8004d5408c88448894cd40044008884cc014008ccd54c01c48004014010004c8004d5408888448894cd40044d400c88004884ccd401488008c010008ccd54c01c480040140100044484888c00c0104484888c004010c8004d5407c8844894cd40045404c884cd4050c010008cd54c0184800401000488ccd5cd19b8f00200101f01e112330012253350021001101e01d12335002223335003220020020013500122001122123300100300223232323333573466e1cd55cea801a40004666444246660020080060046eb4d5d0a8019bad35742a0046eb4d5d09aba2500223263201a33573803603403026ae8940044d55cf280089baa0011232230023758002640026aa034446666aae7c004940348cd4030c010d5d080118019aba2002017232323333573466e1cd55cea80124000466442466002006004601e6ae854008c014d5d09aba2500223263201733573803002e02a26aae7940044dd50009191919191999ab9a3370e6aae75401120002333322221233330010050040030023232323333573466e1cd55cea8012400046644246600200600460306ae854008cd402c05cd5d09aba2500223263201c33573803a03803426aae7940044dd50009aba150043335500b75ca0146ae85400cc8c8c8cccd5cd19b875001480108c84888c008010d5d09aab9e500323333573466e1d4009200223212223001004375c6ae84d55cf280211999ab9a3370ea00690001091100191931900f19ab9c01f01e01c01b01a135573aa00226ea8004d5d0a80119a803bae357426ae8940088c98c8060cd5ce00c80c00b09aba25001135744a00226aae7940044dd500089119191999ab9a3370ea002900011a80398029aba135573ca00646666ae68cdc3a801240044a00e464c6402e66ae7006005c0540504d55cea80089baa00112122300200311220011335500175ceb44488c88c008dd5800990009aa80a11191999aab9f0022500823350073355009300635573aa004600a6aae794008c010d5d100180909aba100111220021221223300100400311221233001003002232323333573466e1d400520062321222230040053007357426aae79400c8cccd5cd19b875002480108c848888c008014c024d5d09aab9e500423333573466e1d400d20022321222230010053007357426aae7940148cccd5cd19b875004480008c848888c00c014dd71aba135573ca00c464c6402066ae7004404003803403002c4d55cea80089baa001232323333573466e1cd55cea80124000466442466002006004600a6ae854008dd69aba135744a004464c6401866ae700340300284d55cf280089baa0012323333573466e1cd55cea800a400046eb8d5d09aab9e500223263200a33573801601401026ea80048c8c8c8c8c8cccd5cd19b8750014803084888888800c8cccd5cd19b875002480288488888880108cccd5cd19b875003480208cc8848888888cc004024020dd71aba15005375a6ae84d5d1280291999ab9a3370ea00890031199109111111198010048041bae35742a00e6eb8d5d09aba2500723333573466e1d40152004233221222222233006009008300c35742a0126eb8d5d09aba2500923333573466e1d40192002232122222223007008300d357426aae79402c8cccd5cd19b875007480008c848888888c014020c038d5d09aab9e500c23263201333573802802602202001e01c01a01801626aae7540104d55cf280189aab9e5002135573ca00226ea80048c8c8c8c8cccd5cd19b875001480088ccc888488ccc00401401000cdd69aba15004375a6ae85400cdd69aba135744a00646666ae68cdc3a80124000464244600400660106ae84d55cf280311931900619ab9c00d00c00a009135573aa00626ae8940044d55cf280089baa001232323333573466e1d400520022321223001003375c6ae84d55cf280191999ab9a3370ea004900011909118010019bae357426aae7940108c98c8024cd5ce00500480380309aab9d50011375400224464646666ae68cdc3a800a40084244400246666ae68cdc3a8012400446424446006008600c6ae84d55cf280211999ab9a3370ea00690001091100111931900519ab9c00b00a008007006135573aa00226ea80048c8cccd5cd19b8750014800880248cccd5cd19b8750024800080248c98c8018cd5ce00380300200189aab9d37540029309000a481035054310022333573466e1c00800401000c488008488004448c8c00400488cc00cc0080080041",
            [info],
            ThreadInfoShape
        )
    }
}

async function deploy(threadDatum: ThreadDatum, threadInfo: ThreadInfo) {

    const utxo: UTxO | undefined = (await lucid.wallet.getUtxos()).find(utxo => utxo.assets['lovelace'] > 10);

    if (!utxo) throw new Error('No utxo found');

    console.log('Using utxo: ', utxo.txHash + '#' + utxo.outputIndex)

    const txOut: TxOutRef = {
        txOutRefId: utxo.txHash,
        txOutRefIdx: BigInt(utxo.outputIndex)
    }
    const threadMintingPolicy = getThreadPolicy(txOut);
    const threadCurrencySymbol = lucid.utils.mintingPolicyToId(threadMintingPolicy);
    console.log('Generated thread currency symbol: ', threadCurrencySymbol)
    
    const nftContractInfo: ContractInfo = { 
        threadToken: threadCurrencySymbol
    }
    const nftMintingPolicy = getZingBoiPolicy(nftContractInfo)
    const nftCurrencySymbol = lucid.utils.mintingPolicyToId(nftMintingPolicy);
 
    console.log('Generated nft currency symbol: ', nftCurrencySymbol)

    const completeThreadInfo: CompleteThreadInfo = {
        tokenPolicy: nftCurrencySymbol,
        threadToken: threadCurrencySymbol,
        ...threadInfo,
    }
    
    const threadValidator = getThreadValidator(completeThreadInfo)
    const threadValidatorAddress = lucid.utils.validatorToAddress(threadValidator);
    console.log('Generated thread validator address: ', threadValidatorAddress)

    const thread: Unit = lucid.utils.mintingPolicyToId(threadMintingPolicy) + fromText("thread")

    const tx = await lucid
                .newTx()
                .mintAssets({[thread] : 1n }, Data.void())
                .attachMintingPolicy(threadMintingPolicy)
                .collectFrom([utxo])
                .payToContract(threadValidatorAddress, 
                    { inline: Data.to<ThreadDatum>(threadDatum, ThreadDatumShape)}, 
                    { [thread] : 1n })
                .complete()

    const txSigned = await tx
                .sign()
                .complete();
    const txHash = await txSigned
                .submit();

    console.log("Deployed. Tx submitted: ", txHash);

    // Using utxo:  c8d5ab9be04222963aad085a2a0a225d907a7b30889fe11c3a81350268ed6741#0
    // Generated thread currency symbol:  e21e1fc60ba73b186def77ed2e2faca8f51db0d81f0e5a4f44b3f7b9
    // Generated nft currency symbol:  d70cf2bea7796a94814ba603b051644c8e90559eee0acf502178fbdf
    // Generated thread validator address:  addr_test1wzcncgl2e2jgh4ssyqg8lk98393ulcqstxs2u202yyrfkcqxcty5y
    // txhash 7c47377c3ae2ebff0bbca0241c10a6895d51f4a781e38f30c55da22abf9c5c0d

}

async function mint(threadInfo: ThreadInfo) {

    const nftCurrencySymbol = 'd70cf2bea7796a94814ba603b051644c8e90559eee0acf502178fbdf'
    const threadCurrencySymbol = 'e21e1fc60ba73b186def77ed2e2faca8f51db0d81f0e5a4f44b3f7b9'
    const thread: Unit = threadCurrencySymbol + fromText("thread")

    const completeThreadInfo: CompleteThreadInfo = {
        tokenPolicy: nftCurrencySymbol,
        threadToken: threadCurrencySymbol,
        ...threadInfo,
    }
    
    const threadValidator = getThreadValidator(completeThreadInfo)
    const threadValidatorAddress = lucid.utils.validatorToAddress(threadValidator);
    console.log('Checking validator address: ', threadValidatorAddress);

    const nftContractInfo: ContractInfo = { 
        threadToken: threadCurrencySymbol
    }
    const nftMintingPolicy = getZingBoiPolicy(nftContractInfo)

    const threadUtxo = (await lucid.utxosAt(threadValidatorAddress)).find(utxo => utxo.assets[thread] == 1n);
    
    if (!threadUtxo) throw new Error("Couldn't find thread utxo");
    if (!threadUtxo.datum) throw new Error("Thread utxo datum invalid or missing");

    const threadDatumDetails = Data.from<ThreadDatum>(threadUtxo.datum, ThreadDatumShape);
    console.log('Found thread datum details: ', threadDatumDetails);

    const newThreadDatumDetails = {
        ...threadDatumDetails,
        mintCount: BigInt(threadDatumDetails.mintCount) + 1n
    }
    console.log('Attemping mint with new details: ', newThreadDatumDetails);
    
    const nft: Unit = nftCurrencySymbol + completeThreadInfo.tokenPrefix + fromText((BigInt(threadDatumDetails.mintCount) + 1n).toString())
    console.log('Minting new NFT: ', nft);

    const tx = await lucid
                .newTx()
                .attachSpendingValidator(threadValidator)
                .collectFrom([threadUtxo], Data.void())
                .attachMintingPolicy(nftMintingPolicy)
                .mintAssets({ [nft] : 1n }, Data.void())
                .payToContract(threadValidatorAddress, 
                    Data.to<ThreadDatum>(newThreadDatumDetails, ThreadDatumShape), 
                    { [thread]: 1n}
                )
                .complete()
    const txSigned = await tx
                .sign()
                .complete()
    const txHash = await txSigned
                .submit()

    console.log("Mint submitted: ", txHash);
}

function main() {

    lucid.selectWalletFromSeed(keys.seed);

    const threadDatum = {
        mintCount: 0n, 
        threadIdx: 0n,
        threadCount: 1n
    }
    
    const threadInfo: ThreadInfo = {
        tokenPrefix: fromText('ZingBoi'),
        maxSupply: 10n
    }
    
    // deploy(threadDatum, threadInfo);
    mint(threadInfo);
}

main()
